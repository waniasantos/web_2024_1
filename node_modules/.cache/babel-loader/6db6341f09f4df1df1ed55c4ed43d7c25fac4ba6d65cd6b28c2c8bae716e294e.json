{"ast":null,"code":"var _jsxFileName = \"/home/wania/Documentos/web_2024_1/src/components/aulas/02FuncoesInternas/FuncoesInternas.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FuncoesInternas = () => {\n  function somar(x, y) {\n    return;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"CALCULADORA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n};\n_c = FuncoesInternas;\nexport default FuncoesInternas;\n\n/*const FuncoesInternas = () => {\n    \n    let num1 = 15\n    let num2 = 10\n\n    // posso criar funções internas a outras funções\n    // também pode criar funções ARROW aqui dentro\n    function somar(x,y) {\n        return x + y\n    }\n\n    function subtrair(x,y) {\n        return x - y;\n    }\n\n    function multiplicar(x,y) {\n        return x * y;\n    }\n\n    function dividir(x,y) {\n        return x / y;\n    }\n\n    return (\n        //o que tiver dentro de {} ele vai interpretar como código javascript\n        <div>\n            <h1>Calculadora</h1>\n            <h3>O resultado da soma é: {somar(num1,num2)}</h3>\n            <h3>O resultado da subtração é: {subtrair(num1,num2)}</h3>\n            <h3>O resultado da multiplicação é: {multiplicar(num1,num2)}</h3>\n            <h3>O resultado da divisão é: {dividir(num1,num2).toFixed(2)}</h3>\n        </div>\n    )\n}\n\nexport default FuncoesInternas\n*/\nvar _c;\n$RefreshReg$(_c, \"FuncoesInternas\");","map":{"version":3,"names":["FuncoesInternas","somar","x","y","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/wania/Documentos/web_2024_1/src/components/aulas/02FuncoesInternas/FuncoesInternas.js"],"sourcesContent":["const FuncoesInternas = () => {\n    \n    function somar(x,y){\n        return \n    }\n    \n    return (\n        <div>\n            <h1>CALCULADORA</h1>\n        </div>       \n    )\n}\n\nexport default FuncoesInternas\n\n/*const FuncoesInternas = () => {\n    \n    let num1 = 15\n    let num2 = 10\n\n    // posso criar funções internas a outras funções\n    // também pode criar funções ARROW aqui dentro\n    function somar(x,y) {\n        return x + y\n    }\n\n    function subtrair(x,y) {\n        return x - y;\n    }\n\n    function multiplicar(x,y) {\n        return x * y;\n    }\n\n    function dividir(x,y) {\n        return x / y;\n    }\n\n    return (\n        //o que tiver dentro de {} ele vai interpretar como código javascript\n        <div>\n            <h1>Calculadora</h1>\n            <h3>O resultado da soma é: {somar(num1,num2)}</h3>\n            <h3>O resultado da subtração é: {subtrair(num1,num2)}</h3>\n            <h3>O resultado da multiplicação é: {multiplicar(num1,num2)}</h3>\n            <h3>O resultado da divisão é: {dividir(num1,num2).toFixed(2)}</h3>\n        </div>\n    )\n}\n\nexport default FuncoesInternas\n*/"],"mappings":";;AAAA,MAAMA,eAAe,GAAGA,CAAA,KAAM;EAE1B,SAASC,KAAKA,CAACC,CAAC,EAACC,CAAC,EAAC;IACf;EACJ;EAEA,oBACIC,OAAA;IAAAC,QAAA,eACID,OAAA;MAAAC,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEd,CAAC;AAAAC,EAAA,GAXKV,eAAe;AAarB,eAAeA,eAAe;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}